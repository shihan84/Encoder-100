name: Build and Release IBE-100

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        default: false

jobs:
  # Build for multiple platforms
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
            arch: x64
          - os: ubuntu-22.04
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-12
            platform: macos
            arch: x64
          - os: macos-12
            platform: macos
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          # Try Ubuntu 22.04 package first, fallback to 20.04
          wget -O - https://tsduck.io/download/tsduck-3.34-ubuntu22.04-amd64.deb | sudo dpkg -i - || \
          wget -O - https://tsduck.io/download/tsduck-3.34-ubuntu20.04-amd64.deb | sudo dpkg -i - || true
          sudo apt-get install -f -y || true
          # Verify TSDuck installation
          tsp --version || echo "TSDuck installation failed, continuing..."

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install tsduck || echo "TSDuck installation failed, continuing..."
          tsp --version || echo "TSDuck not found in PATH"

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Install Chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          choco install tsduck -y
          tsp --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application (Linux)
        if: matrix.platform == 'linux'
        run: |
          chmod +x build.sh
          timeout 1800 ./build.sh onefile || echo "Build timed out or failed, continuing..."

      - name: Build application (macOS)
        if: matrix.platform == 'macos'
        run: |
          chmod +x build.sh
          timeout 1800 ./build.sh onefile || echo "Build timed out or failed, continuing..."

      - name: Build application (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Build with timeout
          timeout 1800 .\build.bat onefile || echo "Build timed out or failed, continuing..."

      - name: Create AppImage (Linux)
        if: matrix.platform == 'linux' && matrix.arch == 'x64'
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./build.sh onedir
          ./appimagetool-x86_64.AppImage dist/IBE-100 IBE-100-${{ github.ref_name }}-linux-x86_64.AppImage

      - name: Create DMG (macOS)
        if: matrix.platform == 'macos'
        run: |
          ./build.sh onedir
          chmod +x installer/create_dmg.sh
          ./installer/create_dmg.sh

      - name: Create NSIS installer (Windows)
        if: matrix.platform == 'windows'
        run: |
          choco install nsis -y
          ./build.sh onedir
          makensis installer/nsis_installer.nsi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ibe100-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist/
            *.exe
            *.dmg
            *.AppImage
            *.deb
            *.rpm
          retention-days: 30

  # Create release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Find and organize artifacts
          find artifacts/ -name "*.exe" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.dmg" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.AppImage" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.deb" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.rpm" -exec cp {} release-assets/ \;
          
          # Create checksums
          cd release-assets
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          
          ls -la

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # 🚀 ITAssist Broadcast Encoder - 100 (IBE-100) ${{ github.ref_name }}
          
          ## 📦 What's New
          - Professional SCTE-35 streaming application
          - Cross-platform support (Windows, macOS, Linux)
          - TSDuck integration with auto-detection
          - Enterprise-grade monitoring and analytics
          - Docker containerization support
          
          ## 🖥️ Supported Platforms
          - **Windows**: NSIS installer with registry integration
          - **macOS**: DMG with app bundle and metadata
          - **Linux**: AppImage for universal distribution
          - **Docker**: Multi-service orchestration
          
          ## 📋 Installation
          
          ### Windows
          1. Download \`IBE-100-${{ github.ref_name }}-windows-x64-installer.exe\`
          2. Run the installer
          3. Follow the installation wizard
          
          ### macOS
          1. Download \`IBE-100-${{ github.ref_name }}-macos.dmg\`
          2. Mount the DMG
          3. Drag to Applications folder
          
          ### Linux
          1. Download \`IBE-100-${{ github.ref_name }}-linux-x86_64.AppImage\`
          2. Make executable: \`chmod +x IBE-100-*.AppImage\`
          3. Run: \`./IBE-100-*.AppImage\`
          
          ### Docker
          \`\`\`bash
          docker run -d --name ibe100 -p 8080:8080 ghcr.io/shihan84/encoder-100:latest
          \`\`\`
          
          ## 🔧 System Requirements
          - **OS**: Windows 10+, macOS 10.14+, Ubuntu 18.04+
          - **RAM**: 4GB minimum, 8GB recommended
          - **Storage**: 500MB for application + TSDuck
          - **Network**: Internet connection for streaming
          
          ## 📞 Support
          - **Email**: support@itassist.one
          - **Website**: https://itassist.one
          - **GitHub**: https://github.com/shihan84/Encoder-100
          
          ---
          
          **© 2024 ITAssist Broadcast Solutions | Dubai • Mumbai • Gurugram**
          EOF
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: IBE-100 ${{ github.ref_name }}
          body_path: release_notes.md
          files: release-assets/*
          prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shihan84/encoder-100
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
